import torch
import torch.nn as nn
import torchvision
import time
import os
from torchvision import models
from collections import OrderedDict


def config(attr):
    """
    Retrieves the queried attribute value from the config file. Loads the
    config file on first call.
    """
    if not hasattr(config, 'config'):
        with open('config.json') as f:
            config.config = eval(f.read())
    node = config.config
    for part in attr.split('.'):
        node = node[part]
    return node

class CNN(nn.Module):
    def __init__(self, data_type, model, pretrain, device = [], params = [], pretrain_file = ""):
        super().__init__()
        self.config_str = data_type + "." + model
        num_classes = config(data_type + "." + model + '.num_classes')
        
        try:
            pretrain = config(self.config_str + ".pretrain")
        except:
            pretrain = False 
         
        if (pretrain_file == ""):
            try: 
                pretrain_file = config(self.config_str + '.pretrain_file')
            except:
                pretrain_file = False

                
        self.model = models.densenet121(pretrained=True)

        if (pretrain_file):
            print("Pretrained densenet file:", pretrain_file)

            checkpoint = torch.load(pretrain_file)
            state_dict = checkpoint['state_dict']
            new_state_dict = OrderedDict()
            pretrain_classes = config(self.config_str + '.pretrain_classes')

            self.model.classifier = nn.Linear(1024, pretrain_classes)
            for k, v in state_dict.items():
                if 'module' in k:
                    k = k.replace('module.','')
                new_state_dict[k]=v
            self.model.load_state_dict(new_state_dict)
        else: 
            print("using ImageNet initialized densenet.")
       
        self.model.classifier = nn.Linear(1024, num_classes)
